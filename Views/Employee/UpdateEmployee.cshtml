@model Neosoft_Assignment_15_02_2025.ViewModel.EmployeeUpdateViewModel
@{
    var photoPath = "~/Images/" + (Model.ExistingPhotoPath ?? "Employee.png");

}

<head>
    <style>
        form {
            background-color: #f9f9f9;
            padding: 20px;
            border: 1px solid #ddd;
            border-radius: 8px;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        }

        /* Form Group Styling */
        .form-group {
            margin-bottom: 20px;
        }

        /* Labels */
        label {
            font-weight: 600;
            color: #333;
        }

        /* Input Fields */
        input.form-control, select.form-control {
            height: 40px;
            border: 1px solid #ccc;
            border-radius: 5px;
            padding: 5px 10px;
            font-size: 14px;
            transition: all 0.2s ease;
        }

            /* Input Focus */
            input.form-control:focus, select.form-control:focus {
                border-color: #007bff;
                box-shadow: 0 0 3px rgba(0, 123, 255, 0.5);
            }

        /* Validation Errors */
        .text-danger {
            font-size: 13px;
            color: #d9534f;
        }

        /* Buttons */
        .btn {
            font-size: 16px;
            font-weight: bold;
            padding: 10px 20px;
            border-radius: 5px;
            text-transform: uppercase;
            letter-spacing: 1px;
            transition: all 0.2s ease;
        }

        .btn-primary {
            background-color: #007bff;
            border-color: #007bff;
            color: #fff;
        }

            .btn-primary:hover {
                background-color: #0056b3;
                border-color: #0056b3;
                color: #fff;
            }

        /* Checkbox and Radio */
        .form-check-input {
            margin-right: 10px;
        }

        .form-check-label {
            font-weight: 500;
            color: #333;
        }

        /* Section Titles */
        h4 {
            font-size: 24px;
            font-weight: bold;
            color: #555;
            margin-bottom: 20px;
        }

        /* Dropdown Styling */
        select.form-control {
            appearance: none;
            background-image: url('data:image/svg+xml;charset=UTF-8,%3Csvg xmlns%3D%27http%3A//www.w3.org/2000/svg%27 viewBox%3D%270 0 4 5%27%3E%3Cpath fill%3D%27%23007bff%27 d%3D%27M2 0L0 2h4z%27/%3E%3C/svg%3E');
            background-repeat: no-repeat;
            background-position: right 10px center;
            background-size: 10px;
        }

        /* Date Inputs */
        input.datepicker, input.date {
            position: relative;
            padding-right: 30px;
        }

    </style>
</head>

<h4>Edit Employee</h4>
<hr />
<div class="row">
    <div class="col-md-8">
        <form asp-action="UpdateEmployee" enctype="multipart/form-data">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <input type="hidden" asp-for="EmployeeCode" id="EmployeeCode" value="@Model.EmployeeCode" />
            <input type="hidden" asp-for="ExistingPhotoPath" />
            <input type="hidden" id="hiddenStateId" value="@Model.StateId" />
            <input type="hidden" id="hiddenCityId" value="@Model.CityId" />

            <div class="form-group">
                <label asp-for="FirstName" class="control-label"></label>
                <input asp-for="FirstName" class="form-control" />
                <span asp-validation-for="FirstName" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="LastName" class="control-label"></label>
                <input asp-for="LastName" class="form-control" />
                <span asp-validation-for="LastName" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="CountryId" class="control-label"></label>
                <select id="CountryDropDown" asp-for="CountryId" class="form-control">
                    <option value="">Select Country</option>
                    @foreach (var country in ViewBag.Countries)
                    {
                        <option value="@country.Row_Id">@country.CountryName</option>
                    }
                </select>
                <span asp-validation-for="CountryId" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="StateId" class="control-label"></label>
                <select id="stateDropdown" asp-for="StateId" class="form-control">
                    <option value="">Select State</option>
                </select>
                <span asp-validation-for="StateId" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="CityId" class="control-label"></label>
                <select id="cityDropdown" asp-for="CityId" class="form-control">
                    <option value="">Select City</option>
                </select>
                <span asp-validation-for="CityId" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="PanNumber" class="control-label"></label>
                <input asp-for="PanNumber" class="form-control uppercase" id="PanNumber" />
                <span asp-validation-for="PanNumber" class="text-danger"></span>
                <span id="panError" class="text-danger"></span>
               @*  @if (ViewBag.pancard != null)
                {
                    <span class="text-danger">@ViewBag.pancard</span>
                } *@
            </div>
            <div class="form-group">
                <label asp-for="PassportNumber" class="control-label"></label>
                <input asp-for="PassportNumber" class="form-control uppercase" id="PassportNumber" />
                <span asp-validation-for="PassportNumber" class="text-danger"></span>
                <span id="passportError" class="text-danger"></span>
               @*  @if (ViewBag.passport != null)
                {
                    <span class="text-danger">@ViewBag.passport</span>
                } *@
            </div>
            <div class="form-group">
                <label asp-for="MobileNumber" class="control-label"></label>
                <input asp-for="MobileNumber" class="form-control" id="MobileNumber" />
                <span asp-validation-for="MobileNumber" class="text-danger"></span>
                <span id="mobileError" class="text-danger"></span>
               @*  @if (ViewBag.moblie != null)
                {
                    <span class="text-danger">@ViewBag.moblie</span>
                } *@
            </div>
            <div class="form-group">
                <label asp-for="EmailAddress" class="control-label"></label>
                <input asp-for="EmailAddress" class="form-control" id="EmailAddress" />
                <span asp-validation-for="EmailAddress" class="text-danger"></span>
                <span id="emailError" class="text-danger"></span>
               @*  @if (ViewBag.email != null)
                {
                    <span class="text-danger">@ViewBag.email</span>
                } *@
            </div>
            <div class="form-group">
                <label asp-for="DateOfBirth" class="control-label"></label>
                <input asp-for="DateOfBirth" class="form-control datepicker" />
                <span asp-validation-for="DateOfBirth" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="DateOfJoinee" class="control-label"></label>
                <input asp-for="DateOfJoinee" class="form-control date" />
                <span asp-validation-for="DateOfJoinee" class="text-danger"></span>
            </div>

            <div class="form-group">
                <label asp-for="Image" class="control-label"></label>
                <input asp-for="Image" type="file" class="form-control" />
                <span asp-validation-for="Image" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label>
                    @if (!string.IsNullOrEmpty(Model.ExistingPhotoPath))
                    {
                        <p>Current File: @System.IO.Path.GetFileName(Model.ExistingPhotoPath)</p>
                        <img src="@Url.Content(Model.ExistingPhotoPath)" alt="Existing Image" style="max-width: 150px; max-height: 150px;" />
                    }
                </label>
            </div>
            <div class="form-group">
                <label asp-for="IsActiveBool" class="control-label">Is Active</label>
                <input asp-for="IsActiveBool" type="checkbox" class="form-check-input" />
                <span asp-validation-for="IsActiveBool" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Gender" class="control-label">Gender</label>
                <div class="form-check">
                    <input asp-for="Gender" type="radio" value="1" class="form-check-input" id="Male" />
                    <label class="form-check-label" for="Male">Male</label>
                </div>
                <div class="form-check">
                    <input asp-for="Gender" type="radio" value="0" class="form-check-input" id="Female" />
                    <label class="form-check-label" for="Female">Female</label>
                </div>
            </div>
            <div class="form-group">
                <input type="submit" id="submitBtn" value="Update" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index">Back to List</a>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script>
        $(document).ready(function () {
            // Initialize datepicker
            //$('.datepicker').datepicker({ format: 'mm/dd/yyyy' });
            $('input.uppercase').on('keyup', function () {
                $(this).val($(this).val().toUpperCase());
            });

            const hiddenStateId = $('#hiddenStateId').val();
            const hiddenCityId = $('#hiddenCityId').val();

        
            var initialCountryId = $('#CountryDropDown').val();

            if (initialCountryId) {
                $.ajax({
                    url: '/Employee/GetStates',
                    type: 'GET',
                    data: { countryId: initialCountryId },
                    success: function (data) {
                        if (data.length > 0) {
                            const $stateDropdown = $('#stateDropdown');
                            $.each(data, function (index, state) {
                                $stateDropdown.append($('<option>', {
                                    value: state.row_Id,
                                    text: state.stateName
                                }));
                            });

                            // Get initial state ID from the model
                            var initialStateId = $('#hiddenStateId').val();

                            // Load cities for the initial state (if any)
                            if (initialStateId) {
                                $.ajax({
                                    url: '/Employee/GetCities',
                                    type: 'GET',
                                    data: { stateId: initialStateId },
                                    success: function (data) {
                                        if (data.length > 0) {
                                            const $cityDropdown = $('#cityDropdown');
                                            $.each(data, function (index, city) {
                                                $cityDropdown.append($('<option>', {
                                                    value: city.row_Id,
                                                    text: city.cityName
                                                }));
                                            });

                                            $('#stateDropdown').val(hiddenStateId);
                                            $('#cityDropdown').val(hiddenCityId);
                                        }
                                    },
                                    error: function (xhr, status, error) {
                                        console.error('Error fetching cities:', status, error);
                                        alert('Error loading cities.');
                                    }
                                });
                            }
                        }
                    },
                    error: function (xhr, status, error) {
                        console.error('Error fetching states:', status, error);
                        alert('Error loading states.');
                    }
                });
            }


            // <!----------Previous code -------------------->
            $('#CountryDropDown').change(function () {
                const countryId = parseInt($(this).val());
                debugger;
                $('#stateDropdown').empty().append('<option value="">Select State</option>');
                $('#cityDropdown').empty().append('<option value="">Select City</option>');

                if (countryId) {
                    $.ajax({
                        url: '/Employee/GetStates',
                        type: 'GET',
                        data: { countryId: countryId },
                        success: function (data) {
                            console.log(data);
                            if (data.length === 0) {
                                alert('No states available for the selected country.');
                                return;
                            }
                            const $stateDropdown = $('#stateDropdown');
                            $.each(data, function (index, state) {
                                $stateDropdown.append($('<option>', {
                                    value: state.row_Id,
                                    text: state.stateName
                                }));
                            });
                        },
                        error: function (xhr, status, error) {
                            console.error('Error fetching states:', status, error);
                            alert('Error loading states.');
                        }
                    });
                }
            });

            // Load cities on state change
            $('#stateDropdown').change(function () {
                const stateId = parseInt($(this).val());
                debugger;
                $('#cityDropdown').empty().append('<option value="">Select City</option>');

                if (stateId) {
                    $.ajax({
                        url: '/Employee/GetCities',
                        type: 'GET',
                        data: { stateId: stateId },
                        success: function (data) {
                            console.log(data);
                            if (data.length === 0) {
                                alert('No cities available for the selected state.');
                                return;
                            }
                            const $cityDropdown = $('#cityDropdown');
                            $.each(data, function (index, city) {
                                $cityDropdown.append($('<option>', {
                                    value: city.row_Id,
                                    text: city.cityName
                                }));
                            });
                        },
                        error: function (xhr, status, error) {
                            console.error('Error fetching cities:', status, error);
                            alert('Error loading cities.');
                        }
                    });
                }
            });
         //   <------------------------------------>

            // $('#EmailAddress').blur(function () {
            //     const emailAddress = $(this).val();
            //     const employeeCode = $('#EmployeeCode').val()
            //     debugger;
            //     if (emailAddress) {
            //         // Make AJAX call to check email uniqueness
            //         $.ajax({
            //             url: '/Employee/IsUniqueEmail', // Controller endpoint
            //             type: 'POST',
            //             //   data:  email ,
            //             data: { emailAddress: emailAddress, employeeCode: employeeCode },
            //            // data: JSON.stringify({ emailAddress, employeeCode }),
            //             success: function (isUnique) {
            //                 if (isUnique) {
            //                     // Clear any previous error message
            //                     $('#emailError').text('');
            //                 } else {
            //                     // Show error message
            //                     $('#emailError').text('This email address is already in use.');
            //                 }
            //             },
            //             error: function (xhr, status, error) {
            //                 console.error('Error checking email uniqueness:', status, error);
            //                 alert('An error occurred while validating the email. Please try again.');
            //             }
            //         });
            //     }
            // });
            $('#submitBtn').click(function (e) {
                e.preventDefault(); 

                const employeeData = {
                    EmployeeCode: $('#EmployeeCode').val(),
                    EmailAddress: $('#EmailAddress').val(),
                    MobileNumber: $('#MobileNumber').val(),
                    PanNumber: $('#PanNumber').val(),
                    PassportNumber: $('#PassportNumber').val(),
                };

               
                $('#emailError').text('');
                $('#mobileError').text('');
                $('#panError').text('');
                $('#passportError').text('');

                
                $.ajax({
                    url: '/Employee/ValidateEmployeeFields',
                    type: 'POST',
                    data: employeeData,
                    success: function (response) {
                        // Check for validation errors
                        if (!response.isValid) {
                            
                            if (response.errors.EmailAddress) {
                                $('#emailError').text(response.errors.EmailAddress);
                            }
                            if (response.errors.MobileNumber) {
                                $('#mobileError').text(response.errors.MobileNumber);
                            }
                            if (response.errors.PanNumber) {
                                $('#panError').text(response.errors.PanNumber);
                            }
                            if (response.errors.PassportNumber) {
                                $('#passportError').text(response.errors.PassportNumber);
                            }
                        } else {
                            
                            $('form').submit();
                        }
                    },
                    error: function (xhr, status, error) {
                        console.error('Validation failed:', status, error);
                        // alert('An error occurred during validation. Please try again.');
                    }
                });
            });

          //  <------------------------------------------>
            // $(document).ready(function () {
            //     $('#submitBtn').click(function (e) {
            //         e.preventDefault(); // Prevent default form submission

            //         // Collect values from form inputs
            //         const employeeData = {
            //             EmployeeCode: $('#EmployeeCode').val(),
            //             EmailAddress: $('#EmailAddress').val(),
            //             MobileNumber: $('#MobileNumber').val(),
            //             PanNumber: $('#PanNumber').val(),
            //             PassportNumber: $('#PassportNumber').val(),
            //         };

            //         // Clear any previous error messages
            //         $('#emailError').text('');
            //         $('#mobileError').text('');
            //         $('#panError').text('');
            //         $('#passportError').text('');

            //         // Perform AJAX request for validation
            //         $.ajax({
            //             url: '/Employee/ValidateEmployeeFields',
            //             type: 'POST',
            //             data: employeeData,
            //             success: function (response) {
            //                 // Check for validation errors
            //                 if (!response.isValid) {
            //                     // Display errors for individual fields
            //                     if (response.errors.EmailAddress) {
            //                         $('#emailError').text(response.errors.EmailAddress);
            //                     }
            //                     if (response.errors.MobileNumber) {
            //                         $('#mobileError').text(response.errors.MobileNumber);
            //                     }
            //                     if (response.errors.PanNumber) {
            //                         $('#panError').text(response.errors.PanNumber);
            //                     }
            //                     if (response.errors.PassportNumber) {
            //                         $('#passportError').text(response.errors.PassportNumber);
            //                     }
            //                 } else {
            //                     // No errors, submit the form
            //                     $('form').submit();
            //                 }
            //             },
            //             error: function (xhr, status, error) {
            //                 console.error('Validation failed:', status, error);
            //                // alert('An error occurred during validation. Please try again.');
            //             }
            //         });
            //     });
            // });
                
          // <----------------------------------------->

        });

    </script>
}
